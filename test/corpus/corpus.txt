=======
module
=======

module foo

---

(program
 (modulepath
  (varid
   (id))))

================
long modulepath
================

module foo/bar/baz

---

(program
 (modulepath
  (qvarid
   (qid
    (id)
    (id)
    (id)))))

========
imports
========

import foo
import foo/bar/baz

import foo = bar
import foo/bar/baz = quux

---

(program
 (modulebody
  (importdecl
   (modulepath
    (varid
     (id))))
  (importdecl
   (modulepath
    (qvarid
     (qid
      (id)
      (id)
      (id)))))
  (importdecl
   (modulepath
    (varid
     (id)))
    (modulepath
     (varid
      (id))))
  (importdecl
   (modulepath
    (qvarid
     (qid
      (id)
      (id)
      (id))))
    (modulepath
     (varid
      (id))))))

=======
fixity
=======

pub infixr 80  (^)
pub infixl 70  (*), (%), (/), cdiv, cmod
pub infixl 60  (+), (-)
pub infix  40  (!=), (==), (<=), (>=), (<), (>)

---

(program
  (modulebody
    (fixitydecl
      (fixity
        (int))
      (oplist
        (identifier
          (idop))))
    (fixitydecl
      (fixity
        (int))
      (oplist
        (identifier
          (idop))
        (identifier
          (idop))
        (identifier
          (idop))
        (identifier
          (varid
            (id)))
        (identifier
          (varid
            (id)))))
    (fixitydecl
      (fixity
        (int))
      (oplist
        (identifier
          (idop))
        (identifier
          (idop))))
    (fixitydecl
      (fixity
        (int))
      (oplist
        (identifier
          (idop))
        (identifier
          (idop))
        (identifier
          (idop))
        (identifier
          (idop))
        (identifier
          (idop))
        (identifier
          (idop))))))

========
externs
========

extern import
  cs file "regex-inline.cs"
  js file "regex-inline.js"
  c  file "regex-inline.c"

---

(program
  (modulebody
    (topdecl
      (externdecl
        (externimpbody
          (externimp
            (externtarget)
            (varid
              (id))
            (string))
          (externimp
            (externtarget)
            (varid
              (id))
            (string))
          (externimp
            (externtarget)
            (varid
              (id))
            (string)))))))

========
numbers
========

val a = 80123456789
val b = -89612
val c = 0
val d = -0
val e = 0x0123456789abcdef
val f = -0XABCDEF
val g = 0x0
val h = -0x0
val i = 13512.45_315_315e+30531
val j = -13512E-30531
val k = 13512.45_315e315
val l = 0.45_315_315e+30531
val m = -0x135EA12.45_31CD5_315p+30531
val n = 0X135f12P-30531
val o = -0x1fAcED3512.45_3e15_315
val p = -0x0.45_31CD5_315p+30531

---

(program
  (modulebody
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (int)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (int)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (int)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (int)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (int)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (int)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (int)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (int)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (float)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (float)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (float)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (float)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (float)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (float)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (float)))))))))))
    (topdecl
      (puredecl
        (binder
          (identifier
            (varid
              (id))))
        (blockexpr
          (expr
            (basicexpr
              (opexpr
                (prefixexpr
                  (appexpr
                    (atom
                      (literal
                        (float)))))))))))))

==========
typedecls
==========

pub open type exception-info
  ExnError      // Generic error
  ExnAssert
  ExnTodo
  ExnRange
  ExnPattern( location : string, definition : string )
  ExnSystem( errno : int )
  ExnInternal( name : string )

pub value struct exception( message :string, info :exception-info )

pub effect exn
  // Throw an exception
  ctl throw-exn( exn : exception ) : a

; TODO: Fix this ---

(program
  (modulebody
    (topdecl
      (typedecl
        (typemod)
        (typeid
          (varid
            (id)))
        (typebody
          (constructors
            (constructors1
              (constructors1
                (constructors1
                  (constructors1
                    (constructors1
                      (constructors1
                        (constructor
                          (conid
                            (id)
                            (id
                              (linecomment)))))
                      (constructor
                        (conid
                          (id)
                          (id))))
                    (constructor
                      (conid
                        (id)
                        (id))))
                  (constructor
                    (conid
                      (id)
                      (id))
                    (conparams
                      (parameters1
                        (parameters1
                          (parameter
                            (paramid
                              (identifier
                                (varid
                                  (id))))
                            (type
                              (tarrow
                                (tatomic
                                  (tbasic
                                    (typeapp
                                      (typecon
                                        (varid
                                          (id))))))))))
                        (parameter
                          (paramid
                            (identifier
                              (varid
                                (id))))
                          (type
                            (tarrow
                              (tatomic
                                (tbasic
                                  (typeapp
                                    (typecon
                                      (varid
                                        (id)))))))))))))
                (constructor
                  (conid
                    (id)
                    (id))
                  (conparams
                    (parameters1
                      (parameter
                        (paramid
                          (identifier
                            (varid
                              (id))))
                        (type
                          (tarrow
                            (tatomic
                              (tbasic
                                (typeapp
                                  (typecon
                                    (varid
                                      (id)))))))))))))
              (constructor
                (conid
                  (id)
                  (id))
                (conparams
                  (parameters1
                    (parameter
                      (paramid
                        (identifier
                          (varid
                            (id))))
                      (type
                        (tarrow
                          (tatomic
                            (tbasic
                              (typeapp
                                (typecon
                                  (varid
                                    (id)))))))))))))))))
    (topdecl
      (typedecl
        (structmod)
        (typeid
          (varid
            (id)))
        (conparams
          (parameters1
            (parameters1
              (parameter
                (paramid
                  (identifier
                    (varid
                      (id))))
                (type
                  (tarrow
                    (tatomic
                      (tbasic
                        (typeapp
                          (typecon
                            (varid
                              (id))))))))))
            (parameter
              (paramid
                (identifier
                  (varid
                    (id))))
              (type
                (tarrow
                  (tatomic
                    (tbasic
                      (typeapp
                        (typecon
                          (varid
                            (id)))))))))))))
    (topdecl
      (typedecl
        (varid
          (id))
        (opdecls
          (linecomment)
          (operations
            (operation
              (identifier
                (varid
                  (id)))
              (parameters1
                (parameter
                  (paramid
                    (identifier
                      (varid
                        (id))))
                  (type
                    (tarrow
                      (tatomic
                        (tbasic
                          (typeapp
                            (typecon
                              (varid
                                (id))))))))))
              (tatomic
                (tbasic
                  (typeapp
                    (typecon
                      (varid
                        (id)))))))))))))

===========
simple var
===========

val foo = bar

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
     (blockexpr
      (expr
       (basicexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (qidentifier
             (identifier
              (varid
               (id)))))))))))))))

=======
string
=======

val foo = "bar"

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
     (blockexpr
      (expr
       (basicexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (literal
             (string)))))))))))))

===========
raw string
===========

val foo = r"bar"
val foo = r#"bar"#
val foo = r###"bar"##baz"###

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
     (blockexpr
      (expr
       (basicexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (literal
             (string)))))))))))
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
     (blockexpr
      (expr
       (basicexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (literal
             (string)))))))))))
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
     (blockexpr
      (expr
       (basicexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (literal
             (string)))))))))))))

====
fun
====

fun main()
  return 0

---

(program
 (modulebody
  (topdecl
   (puredecl
    (funid
     (identifier
      (varid
       (id))))
    (funbody
     (bodyexpr
      (blockexpr
       (expr
        (block
         (statements
          (statement
           (returnexpr
            (expr
             (basicexpr
              (opexpr
               (prefixexpr
                (appexpr
                 (atom
                  (literal
                   (int))))))))))))))))))))

============
linecomment
============

// a comment

// more
// comments

val foo = 0 // another comment

---

(program
 (linecomment)
 (linecomment)
 (linecomment)
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (literal
            (int)))))))))))
  (linecomment)))

=============
blockcomment
=============

/* a comment */

/* more
 comments
 */

val foo = 0 /* another comment */

/* a /* very /* nested */ comment */ structure */
---

(program
 (blockcomment)
 (blockcomment)
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (literal
            (int)))))))))))
  (blockcomment)
  (blockcomment
   (blockcomment
    (blockcomment)))))

====================
top level statments
====================

with foo
var bar := baz

---

(program
 (statements
  (statement
   (withstat
    (basicexpr
     (opexpr
      (prefixexpr
       (appexpr
        (atom
         (qidentifier
          (identifier
           (varid
            (id)))))))))))
  (statement
   (decl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))))

=============================
no semis no trailing newline
=============================

val foo = bar
---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))))

=================================
no semis easy start continuation
=================================

val foo = a
 + b

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))
        (qoperator
         (op))
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))))

===============================
advanced keyword continuations
===============================

val a = if b
  then c
  elif d
  then e
  else f
val a = if b
  then 'c'
  elif'
  else'

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (ifexpr
        (ntlexpr
         (ntlopexpr
          (ntlprefixexpr
           (ntlappexpr
            (atom
             (qidentifier
              (identifier
               (varid
                (id)))))))))
        (blockexpr
         (expr
          (basicexpr
           (opexpr
            (prefixexpr
             (appexpr
              (atom
               (qidentifier
                (identifier
                 (varid
                  (id)))))))))))
        (elifs
         (ntlexpr
          (ntlopexpr
           (ntlprefixexpr
            (ntlappexpr
             (atom
              (qidentifier
               (identifier
                (varid
                 (id)))))))))
        (blockexpr
         (expr
          (basicexpr
           (opexpr
            (prefixexpr
             (appexpr
              (atom
               (qidentifier
                (identifier
                 (varid
                  (id)))))))))))
        (blockexpr
         (expr
          (basicexpr
           (opexpr
            (prefixexpr
             (appexpr
              (atom
               (qidentifier
                (identifier
                 (varid
                  (id))))))))))))))))))
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (ifexpr
        (ntlexpr
         (ntlopexpr
          (ntlprefixexpr
           (ntlappexpr
            (atom
             (qidentifier
              (identifier
               (varid
                (id)))))))))
        (blockexpr
         (expr
          (basicexpr
           (opexpr
            (prefixexpr
             (appexpr
              (appexpr
               (atom
                (literal
                 (char))))
              (block
               (statements
                (statement
                 (basicexpr
                  (opexpr
                   (prefixexpr
                    (appexpr
                     (atom
                      (qidentifier
                       (identifier
                        (varid
                         (id))))))))))
                (statement
                 (basicexpr
                  (opexpr
                   (prefixexpr
                    (appexpr
                     (atom
                      (qidentifier
                       (identifier
                        (varid
                         (id))))))))))))))))))))))))))

================================
advanced operator continuations
================================

val a = b
  < c
val a = b
  >| d
val a = b
  > d

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))
        (qoperator
         (op))
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))
        (qoperator
         (op))
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))
        (qoperator
         (op))
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))))

==================
braced modulebody
==================

module foo/bar {
  infixl 1 (>>=)

  pub val a = 0
}

---

(program
 (modulepath
  (qvarid
   (qid
    (id)
    (id))))
 (modulebody
  (fixitydecl
   (fixity
    (int))
   (oplist
    (identifier
     (idop)))))
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (literal
            (int)))))))))))))
