=======
module
=======

module foo

---

(program
 (modulepath
  (varid
   (id))))

================
long modulepath
================

module foo/bar/baz

---

(program
 (modulepath
  (qvarid
   (qid
    (id)
    (id)
    (id)))))

===========
simple var
===========

val foo = bar

---

(program
 (topdecl
  (puredecl
   (binder
    (identifier
     (varid
      (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id))))))))))))))

=======
string
=======

val foo = "bar"

---

(program
 (topdecl
  (puredecl
   (binder
    (identifier
     (varid
      (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (literal
            (string))))))))))))

===========
raw string
===========

val foo = r"bar"
val foo = r#"bar"#
val foo = r###"bar"##baz"###

---

(program
 (topdecl
  (puredecl
   (binder
    (identifier
     (varid
      (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (literal
            (string)))))))))))
 (topdecl
  (puredecl
   (binder
    (identifier
     (varid
      (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (literal
            (string)))))))))))
 (topdecl
  (puredecl
   (binder
    (identifier
     (varid
      (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (literal
            (string))))))))))))

====
fun
====

fun main()
  return 0

---

(program
 (topdecl
  (puredecl
   (funid
    (identifier
     (varid
      (id))))
   (funbody
    (bodyexpr
     (blockexpr
      (expr
       (block
        (statements1
         (statement
          (returnexpr
           (expr
            (basicexpr
             (opexpr
              (prefixexpr
               (appexpr
                (atom
                 (literal
                  (int)))))))))))))))))))

============
linecomment
============

// a comment

// more
// comments

val foo = 0 // another comment

---

(program
 (linecomment)
 (linecomment)
 (linecomment)
 (topdecl
  (puredecl
   (binder
    (identifier
     (varid
      (id))))
   (blockexpr
    (expr
     (basicexpr
      (opexpr
       (prefixexpr
        (appexpr
         (atom
          (literal
           (int)))))))))))
 (linecomment))

=============
blockcomment
=============

/* a comment */

/* more
 comments
 */

val foo = 0 /* another comment */

/* a /* very /* nested */ comment */ structure */
---

(program
 (blockcomment)
 (blockcomment)
 (topdecl
  (puredecl
   (binder
    (identifier
     (varid
      (id))))
   (blockexpr
    (expr
     (basicexpr
      (opexpr
       (prefixexpr
        (appexpr
         (atom
          (literal
           (int)))))))))))
 (blockcomment)
 (blockcomment
  (blockcomment
   (blockcomment))))
