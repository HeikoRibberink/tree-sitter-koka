=======
module
=======

module foo

---

(program
 (modulepath
  (varid
   (id))))

================
long modulepath
================

module foo/bar/baz

---

(program
 (modulepath
  (qvarid
   (qid
    (id)
    (id)
    (id)))))

===========
simple var
===========

val foo = bar

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
     (blockexpr
      (expr
       (basicexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (qidentifier
             (identifier
              (varid
               (id)))))))))))))))

=======
string
=======

val foo = "bar"

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
     (blockexpr
      (expr
       (basicexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (literal
             (string)))))))))))))

===========
raw string
===========

val foo = r"bar"
val foo = r#"bar"#
val foo = r###"bar"##baz"###

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
     (blockexpr
      (expr
       (basicexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (literal
             (string)))))))))))
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
     (blockexpr
      (expr
       (basicexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (literal
             (string)))))))))))
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
     (blockexpr
      (expr
       (basicexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (literal
             (string)))))))))))))

====
fun
====

fun main()
  return 0

---

(program
 (modulebody
  (topdecl
   (puredecl
    (funid
     (identifier
      (varid
       (id))))
    (funbody
     (bodyexpr
      (blockexpr
       (expr
        (block
         (statements1
          (statement
           (returnexpr
            (expr
             (basicexpr
              (opexpr
               (prefixexpr
                (appexpr
                 (atom
                  (literal
                   (int))))))))))))))))))))

============
linecomment
============

// a comment

// more
// comments

val foo = 0 // another comment

---

(program
 (linecomment)
 (linecomment)
 (linecomment)
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (literal
            (int)))))))))))
  (linecomment)))

=============
blockcomment
=============

/* a comment */

/* more
 comments
 */

val foo = 0 /* another comment */

/* a /* very /* nested */ comment */ structure */
---

(program
 (blockcomment)
 (blockcomment)
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (literal
            (int)))))))))))
  (blockcomment)
  (blockcomment
   (blockcomment
    (blockcomment)))))

====================
top level statments
====================

with foo
var bar := baz

---

(program
 (statements1
  (statements1
   (statement
    (withstat
     (basicexpr
      (opexpr
       (prefixexpr
        (appexpr
         (atom
          (qidentifier
           (identifier
            (varid
             (id))))))))))))
  (statement
   (decl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))))

========================================
no semis no trailing newline
========================================

val foo = bar
---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))))

=================================
no semis easy start continuation
=================================

val foo = a
 + b

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (qidentifier
             (identifier
              (varid
               (id))))))))
        (qoperator
         (op
          (symbols)))
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))))

===============================
advanced keyword continuations
===============================

val a = if b
  then c
  elif d
  then e
  else f
val a = if b
  then'c'
  elsed

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (ifexpr
        (ntlexpr
         (ntlopexpr
          (ntlprefixexpr
           (ntlappexpr
            (atom
             (qidentifier
              (identifier
               (varid
                (id)))))))))
        (blockexpr
         (expr
          (basicexpr
           (opexpr
            (prefixexpr
             (appexpr
              (atom
               (qidentifier
                (identifier
                 (varid
                  (id)))))))))))
        (elifs
         (ntlexpr
          (ntlopexpr
           (ntlprefixexpr
            (ntlappexpr
             (atom
              (qidentifier
               (identifier
                (varid
                 (id)))))))))
        (blockexpr
         (expr
          (basicexpr
           (opexpr
            (prefixexpr
             (appexpr
              (atom
               (qidentifier
                (identifier
                 (varid
                  (id)))))))))))
        (elifs
         (blockexpr
          (expr
           (basicexpr
            (opexpr
             (prefixexpr
              (appexpr
               (atom
                (qidentifier
                 (identifier
                  (varid
                   (id)))))))))))))))))))
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (ifexpr
        (ntlexpr
         (ntlopexpr
          (ntlprefixexpr
           (ntlappexpr
            (atom
             (qidentifier
              (identifier
               (varid
                (id)))))))))
        (blockexpr
         (expr
          (basicexpr
           (opexpr
            (prefixexpr
             (appexpr
              (appexpr
               (atom
                (literal
                 (char))))
              (block
               (statements1
                (statement
                 (basicexpr
                  (opexpr
                   (prefixexpr
                    (appexpr
                     (atom
                      (qidentifier
                       (identifier
                        (varid
                         (id))))))))))))))))))))))))))

================================
advanced operator continuations
================================

val a = b
  < c
val a = b
  >| d
val a = b
  > d

---

(program
 (modulebody
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (qidentifier
             (identifier
              (varid
               (id))))))))
        (qoperator
         (op
          (symbols)))
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (qidentifier
             (identifier
              (varid
               (id))))))))
        (qoperator
         (op
          (symbols)))
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))
  (topdecl
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (opexpr
         (prefixexpr
          (appexpr
           (atom
            (qidentifier
             (identifier
              (varid
               (id))))))))
        (qoperator
         (op
          (symbols)))
        (prefixexpr
         (appexpr
          (atom
           (qidentifier
            (identifier
             (varid
              (id)))))))))))))))

==================
braced modulebody
==================

module foo/bar {
  infixl 1 (>>=)

  pub val a = 0
}

---

(program
 (modulepath
  (qvarid
   (qid
    (id)
    (id))))
 (modulebody
  (fixitydecl
   (fixity
    (int))
   (oplist1
    (identifier
     (idop
      (symbols))))))
 (modulebody
  (topdecl
   (pub)
   (puredecl
    (binder
     (identifier
      (varid
       (id))))
    (blockexpr
     (expr
      (basicexpr
       (opexpr
        (prefixexpr
         (appexpr
          (atom
           (literal
            (int)))))))))))))
